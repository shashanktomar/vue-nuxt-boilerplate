version: 2

jobs:
  test:
    docker:
      # https://circleci.com/docs/2.0/circleci-images/#nodejs
      - image: circleci/node:latest-browsers
    working_directory: ~/app

    steps:
      - checkout

      - run:
          name: Tests
          environment:
            NODE_ENV: 'test'
          command: 'docker-compose run vue yarn ci'

workflows:
  version: 2
  test:
    jobs:
      - test

# jobs:
#   test:
#     docker:
#       # https://circleci.com/docs/2.0/circleci-images/#nodejs
#       - image: circleci/node:latest-browsers
#     working_directory: ~/app

#     steps:
#       - checkout

#       - run:
#           name: Tests
#           environment:
#             DATABASE_URL: 'postgres://ubuntu@localhost:5432/contacts?sslmode=disable'
#             DB_MIGRATIONS: /go/src/github.com/circleci/cci-demo-docker/db/migrations
#           command: |
#             set -ou pipefail
#             trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
#             # Notice this `set -o pipefail`, this will cause script to fail if `make test` fails
#             # without this option script will return success regardless of testing result due to pipe after test command
#             make test | tee ${TEST_RESULTS}/go-test.out
#       - setup_remote_docker

#       # This should go into custom primary image, here's only for the sake of explanation
#       - run:
#           name: Install Docker client
#           command: |
#             set -x
#             VER="17.03.0-ce"
#             curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
#             tar -xz -C /tmp -f /tmp/docker-$VER.tgz
#             mv /tmp/docker/* /usr/bin
#       # This should go into custom primary image, here's only for the sake of explanation
#       - run:
#           name: Install Docker Compose
#           command: |
#             set -x
#             curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
#             chmod +x /usr/local/bin/docker-compose
#       - run:
#           name: Build service
#           command: make

#       - run:
#           name: Start container and verify it's working
#           command: |
#             set -x
#             docker-compose up -d
#             # docker-compose will start 2 containers, the one with service will be named `contacts`
#             # we start another container with curl in the same network as `contacts`, this way we have
#             # all exposed ports from `contacts` available on `localhost` in this new container
#             docker run --network container:contacts \
#               appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test
#       - deploy:
#           name: Build and push Docker image
#           command: |
#             TAG="0.1.${CIRCLE_BUILD_NUM}"
#             docker build -t circleci/cci-demo-docker:$TAG .
#             docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#             docker push circleci/cci-demo-docker:$TAG
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: raw-test-output

#       - store_test_results:
#           path: /tmp/test-results
